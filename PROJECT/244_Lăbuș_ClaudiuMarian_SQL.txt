-- CREARE TABELE

CREATE OR REPLACE TYPE NUM_LIST IS TABLE OF NUMBER;

CREATE TABLE coordonate
(
    id          NUMBER PRIMARY KEY,
    latitudine  NUM_LIST,
    longitudine NUM_LIST
)
    NESTED TABLE latitudine STORE AS lat_coords
    NESTED TABLE longitudine STORE AS long_coords;


CREATE TABLE judet
(
    id       INT PRIMARY KEY,
    denumire VARCHAR2(100)
);


CREATE TABLE localitate
(
    id            INT PRIMARY KEY,
    id_judet      INT,
    id_coordonate INT,
    denumire      VARCHAR2(100),
----------------------------------
    CONSTRAINT fk_judet
        FOREIGN KEY (id_judet)
            REFERENCES judet (id),
----------------------------------
    CONSTRAINT fk_coords
        FOREIGN KEY (id_coordonate)
            REFERENCES coordonate (id)
);


CREATE TABLE persoana_fizica
(
    id           INT PRIMARY KEY,
    id_domiciliu INT,
    nume         VARCHAR2(100),
    prenume      VARCHAR2(100),
    gen          CHAR,
    cnp          VARCHAR2(13),
----------------------------------
    CONSTRAINT fk_domiciliu
        FOREIGN KEY (id_domiciliu)
            REFERENCES localitate (id),
----------------------------------
    CONSTRAINT gen_char
        CHECK ( gen IN ('M', 'F')),
----------------------------------
    CONSTRAINT unique_cnp UNIQUE (cnp)
);

CREATE TABLE caen
(
    cod        VARCHAR2(10) PRIMARY KEY,
    activitate VARCHAR2(100)
);


CREATE TABLE firma
(
    id               INT PRIMARY KEY,
    id_administrator INT,
    id_sediu         INT,
    denumire         VARCHAR2(100),
    cui              VARCHAR2(20),
----------------------------------
    CONSTRAINT fk_administrator
        FOREIGN KEY (id_administrator)
            REFERENCES persoana_fizica (id),
----------------------------------
    CONSTRAINT fk_sediu
        FOREIGN KEY (id_sediu)
            REFERENCES localitate (id),
----------------------------------
    CONSTRAINT unique_cui UNIQUE (cui)
);


CREATE TABLE firma_caen
(
    id_firma INT,
    cod_caen VARCHAR2(10),
----------------------------------
    CONSTRAINT fk_firma
        FOREIGN KEY (id_firma)
            REFERENCES firma (id),
----------------------------------
    CONSTRAINT fk_caen
        FOREIGN KEY (cod_caen)
            REFERENCES caen (cod),
----------------------------------
    CONSTRAINT pk_firma_caen PRIMARY KEY (id_firma, cod_caen)
);


CREATE TABLE cultura
(
    id       INT PRIMARY KEY,
    denumire VARCHAR2(100)
);


CREATE TABLE utilizator
(
    id              INT PRIMARY KEY,
    id_firma        INT,
    nume_utilizator VARCHAR2(100),
    parola          VARCHAR2(100),
    data_inscriere DATE DEFAULT sysdate,
----------------------------------
    CONSTRAINT fk_firma_1
        FOREIGN KEY (id_firma)
            REFERENCES firma (id),
----------------------------------
    CONSTRAINT unique_username UNIQUE (nume_utilizator)
);

CREATE SEQUENCE seq_parcela
    START WITH 1
    INCREMENT BY 1
    NOCACHE;

CREATE TABLE parcela
(
    id                 INT DEFAULT seq_parcela.nextval PRIMARY KEY,
    id_proprietar      INT,
    id_coordonate      INT,
    id_cultura         INT,
    nr_parcela         INT,
    suprafata          NUMBER,
    ultima_actualizare DATE,
----------------------------------
    CONSTRAINT fk_proprietar
        FOREIGN KEY (id_proprietar)
            REFERENCES utilizator (id),
----------------------------------
    CONSTRAINT fk_coords_1
        FOREIGN KEY (id_coordonate)
            REFERENCES coordonate (id),
----------------------------------
    CONSTRAINT fk_cultura
        FOREIGN KEY (id_cultura)
            REFERENCES cultura (id),
----------------------------------
    CONSTRAINT unique_nr_parcela UNIQUE (id, nr_parcela)
);


-- INSERARI -----------------------------------------------------------------------------------


--------------------- JUDETE ---------------------

INSERT INTO judet (id, denumire)
VALUES (1, 'GALATI');

INSERT INTO judet (id, denumire)
VALUES (2, 'BRAILA');

INSERT INTO judet (id, denumire)
VALUES (3, 'VASLUI');

INSERT INTO judet (id, denumire)
VALUES (4, 'BACAU');

INSERT INTO judet (id, denumire)
VALUES (5, 'VRANCEA');

INSERT INTO judet (id, denumire)
VALUES (6, 'IASI');

INSERT INTO judet (id, denumire)
VALUES (7, 'BOTOSANI');

INSERT INTO judet (id, denumire)
VALUES (8, 'SUCEAVA');

INSERT INTO judet (id, denumire)
VALUES (9, 'NEAMT');


--------------------- LOCALITATI ---------------------

-- LOCALITATEA GOHOR JUD GALATI
INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (1,
    num_list(27.39161962867713, 27.3977011786161, 27.41281369928096, 27.41881062811418, 27.41687172860411, 27.38768868566172, 27.38271472882957, 27.3859247954278, 27.39161962867713),
    num_list(46.03393372205996, 46.03327340459964, 46.03390946936025, 46.05685225501913, 46.07902668392548, 46.07759022911947, 46.06915891427744, 46.05405095434615, 46.03393372205996)
);
INSERT INTO localitate (id, id_judet, id_coordonate, denumire)
VALUES (1, 1, 1, 'GOHOR');

-- LOCALITATEA BRAHASESTI JUD GALATI
INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (2,
    num_list(27.39150981566837, 27.38632028310777, 27.35684697473988, 27.34011091314626, 27.35486483457116,27.39150981566837),
    num_list(46.03393695904147, 46.05240507171655, 46.06365802308543, 46.04412346015004, 46.02046400140826,46.03393695904147)
);
INSERT INTO localitate (id, id_judet, id_coordonate, denumire)
VALUES (2, 1, 2, 'BRAHASESTI');

-- LOCALITATEA PRIPONESTI JUD GALATI
INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (3,
    num_list(27.41921895511155, 27.45827412435824, 27.47551770786777, 27.43367699767672, 27.41688754795232, 27.41921895511155),
    num_list(46.05694929632945, 46.04764136124308, 46.07447363984426, 46.09529935684129, 46.07900764979539, 46.05694929632945)
);
INSERT INTO localitate (id, id_judet, id_coordonate, denumire)
VALUES (3, 1, 3, 'PRIPONESTI');

-- LOCALITATEA IREASCA JUD GALATI
INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (4,
    num_list(27.41325114131805, 27.44645755402078, 27.45811956574869, 27.41902903631780, 27.41325114131805),
    num_list(46.03369719650642, 46.02557399447304, 46.04747873821847, 46.05669478830567, 46.03369719650642)
);
INSERT INTO localitate (id, id_judet, id_coordonate, denumire)
VALUES (4, 1, 4, 'IREASCA');

-- LOCALITATEA NARTESTI JUD GALATI
INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (5,
    num_list(27.37813114389741, 27.386242696567, 27.42425485802519, 27.41752180950916, 27.41213609624842,27.39109844189572, 27.37813114389741),
    num_list(46.02827466190055, 45.99575378323244, 45.99864067681271, 46.03226579570294, 46.03351094716646,46.03318238568578, 46.02827466190055)
);
INSERT INTO localitate (id, id_judet, id_coordonate, denumire)
VALUES (5, 1, 5, 'NARTESTI');

-- LOCALITATEA COSITENI JUD GALATI
INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (6,
    num_list(27.34912762932924, 27.35719774714538, 27.38593148149474, 27.38230606242307, 27.39099056446655,27.34912762932924),
    num_list(46.07949063204272, 46.06378101287717, 46.05275157886128, 46.06880432585608, 46.0848629484237,46.07949063204272)
);
INSERT INTO localitate (id, id_judet, id_coordonate, denumire)
VALUES (6, 1, 6, 'COSITENI');

-- LOCALITATEA TOFLEA JUD GALATI
INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (7,
    num_list(27.33994255276722, 27.35662493723997, 27.34823986607441, 27.30197983249452, 27.33994255276722),
    num_list(46.04436514880626, 46.06366427799998, 46.07948826950219, 46.0766026858324, 46.04436514880626)
);
INSERT INTO localitate (id, id_judet, id_coordonate, denumire)
VALUES (7, 1, 7, 'TOFLEA');

--------------------- PERSOANE FIZICE ---------------------

INSERT INTO persoana_fizica (id, id_domiciliu, nume, prenume, gen, cnp)
VALUES (1, 1, 'LĂBUȘ', 'FLORIN', 'M', '5038493839384');

INSERT INTO persoana_fizica (id, id_domiciliu, nume, prenume, gen, cnp)
VALUES (2, 1, 'TITIRE', 'GHEORGHITA', 'M', '2947394755204');

INSERT INTO persoana_fizica (id, id_domiciliu, nume, prenume, gen, cnp)
VALUES (3, 5, 'PORUMB', 'EMANOIL', 'M', '8164028395215');

INSERT INTO persoana_fizica (id, id_domiciliu, nume, prenume, gen, cnp)
VALUES (4, 7, 'IEPURE', 'SPERANTIA', 'F', '1856302716492');

INSERT INTO persoana_fizica (id, id_domiciliu, nume, prenume, gen, cnp)
VALUES (5, 3, 'POPESCU', 'VASILE', 'M', '5943129092213');


--------------------- CODURI CAEN ---------------------

INSERT INTO caen (cod, activitate)
VALUES ('0111', 'Cultivarea cerealelor, plantelor leguminoase și a plantelor producătoare de semințe oleaginoase');

INSERT INTO caen (cod, activitate)
VALUES ('0112', 'Cultivarea orezului');

INSERT INTO caen (cod, activitate)
VALUES ('0113', 'Cultivarea legumelor și a pepenilor, a rădăcinoaselor și tuberculilor');

INSERT INTO caen (cod, activitate)
VALUES ('0114', 'Cultivarea trestiei de zahăr');

INSERT INTO caen (cod, activitate)
VALUES ('0115', 'Cultivarea tutunului');

INSERT INTO caen (cod, activitate)
VALUES ('0116', 'Cultivarea plantelor pentru fibre textile');

INSERT INTO caen (cod, activitate)
VALUES ('0119', 'Cultivarea altor plante din culturi nepermanente');


--------------------- FIRME ---------------------

INSERT INTO firma (id, id_administrator, id_sediu, denumire, cui)
VALUES (1, 1, 1, 'Lăbuș Florin I.I.', '481021');

INSERT INTO firma (id, id_administrator, id_sediu, denumire, cui)
VALUES (2, 3, 4, 'PNL FARM SRL', '138982');

INSERT INTO firma (id, id_administrator, id_sediu, denumire, cui)
VALUES (3, 5, 2, 'POPEPENI SRL', '640923');

INSERT INTO firma (id, id_administrator, id_sediu, denumire, cui)
VALUES (4, 4, 7, 'IEPURE SPERANTIA PFA', '430832');

INSERT INTO firma (id, id_administrator, id_sediu, denumire, cui)
VALUES (5, 2, 1, 'GHITZA SRL', '358230');


--------------------- CODURI CAEN - FIRME ---------------------

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (1, '0111');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (1, '0113');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (2, '0111');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (2, '0116');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (2, '0119');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (3, '0113');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (3, '0119');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (4, '0119');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (4, '0115');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (5, '0111');

INSERT INTO firma_caen (id_firma, cod_caen)
VALUES (5, '0113');


--------------------- CULTURI ---------------------

INSERT INTO cultura (id, denumire)
VALUES (101, 'GRAU');

INSERT INTO cultura (id, denumire)
VALUES (105, 'ORZ');

INSERT INTO cultura (id, denumire)
VALUES (108, 'PORUMB');

INSERT INTO cultura (id, denumire)
VALUES (201, 'FLOAREA SOARELUI');

INSERT INTO cultura (id, denumire)
VALUES (974, 'LUCERNA');

INSERT INTO cultura (id, denumire)
VALUES (639, 'PEPENI');

INSERT INTO cultura (id, denumire)
VALUES (298, 'TUTUN');

INSERT INTO cultura (id, denumire)
VALUES (1923, 'ROSII');

INSERT INTO cultura (id, denumire)
VALUES (1924, 'CASTRAVETI');


--------------------- UTILIZATORI ---------------------

INSERT INTO utilizator (id, id_firma, nume_utilizator, parola)
VALUES (1, 3, 'RO28491848', 'oa9oIR4r');

INSERT INTO utilizator (id, id_firma, nume_utilizator, parola)
VALUES (2, 1, 'RO59103943', 'ORoe11mC');

INSERT INTO utilizator (id, id_firma, nume_utilizator, parola)
VALUES (3, 5, 'RO10382048', 'AOWu42ef');

INSERT INTO utilizator (id, id_firma, nume_utilizator, parola)
VALUES (4, 2, 'RO82359740', '69Aok24h');

INSERT INTO utilizator (id, id_firma, nume_utilizator, parola)
VALUES (5, 4, 'RO01582956', 'F8i320J8');


--------------------- PARCELE ---------------------

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (8,
    num_list(27.38398646394512, 27.39258889279089, 27.39245499456955, 27.38437029168849, 27.38398646394512),
    num_list(46.06741616081491, 46.06818620108033, 46.06941815343022, 46.06861137285969, 46.06741616081491)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (9,
    num_list(27.38706186121867, 27.38372092263574, 27.38257023972949, 27.38494319475576, 27.38706186121867),
    num_list(46.07794878154138, 46.078682380151, 46.07452221760423, 46.07378407098127, 46.07794878154138)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (10,
    num_list(27.39020485220995, 27.38992583160482, 27.38402103254766, 27.38302410294547, 27.39020485220995),
    num_list(46.06941826247543, 46.07123592490891, 46.07120713946931, 46.06888883563936, 46.06941826247543)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (11,
    num_list(27.38381329136287, 27.38305109443528, 27.38694970290969, 27.38897010176537, 27.38381329136287),
    num_list(46.08172547415104, 46.07826979637072, 46.07770254098575, 46.08167806851747, 46.08172547415104)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (12,
    num_list(27.3877039084936, 27.38734406231644, 27.39434708018972, 27.39428283510824, 27.3877039084936),
    num_list(46.04689528702177, 46.04529406337719, 46.04576529734717, 46.0475549000348, 46.04689528702177)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (13,
    num_list(27.34976788295621, 27.35760088880378, 27.35549211887732, 27.34782317441497, 27.34976788295621),
    num_list(46.03161781706404, 46.03266533874119, 46.0379431707833, 46.03708937397057, 46.03161781706404)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (14,
    num_list(27.32094455343529, 27.32412707884729, 27.31962759484149, 27.31555148555098, 27.32094455343529),
    num_list(46.06130511601396, 46.06097914708342, 46.07008455794255, 46.0702208427719, 46.06130511601396)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (15,
    num_list(27.4029522540963, 27.41252539591962, 27.41222563002147, 27.40348523397968, 27.4029522540963),
    num_list(46.02259312073821, 46.02257575726103, 46.02598158270811, 46.02617210608462, 46.02259312073821)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (16,
    num_list(27.44759584443307, 27.44414598390576, 27.45448635311674, 27.45750358170248, 27.44759584443307),
    num_list(46.04974476611227, 46.04439789253986, 46.04187410899225, 46.047362693952, 46.04974476611227)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (17,
    num_list(27.43099358001283, 27.43515795750641, 27.43439728584931, 27.43126365984379, 27.43099358001283),
    num_list(46.05473304412737, 46.05417165707246, 46.05991094145585, 46.06003862017076, 46.05473304412737)
);

INSERT INTO coordonate (id, longitudine, latitudine)
VALUES (18,
    num_list(27.41183783341678, 27.41008127935638, 27.40576076554959, 27.40527322941899, 27.41183783341678),
    num_list(46.04370044785122, 46.04554068857237, 46.04553020242665, 46.04347293790054, 46.04370044785122)
);

-- aici am folosit o functie de inserare care calculeaza automat suprafata parcelelor
BEGIN
    apia_pkg.creare_parcela(2, 8, 201, 1);
    apia_pkg.creare_parcela(2, 11, 108, 2);
    apia_pkg.creare_parcela(2, 18, 101, 3);
    apia_pkg.creare_parcela(1, 9, 639, 1);
    apia_pkg.creare_parcela(1, 10, 639, 2);
    apia_pkg.creare_parcela(3, 12, 974, 1);
    apia_pkg.creare_parcela(3, 13, 1924, 2);
    apia_pkg.creare_parcela(4, 15, 108, 1);
    apia_pkg.creare_parcela(4, 16, 105, 2);
    apia_pkg.creare_parcela(4, 17, 1924, 3);
    apia_pkg.creare_parcela(5, 14, 298, 1);
END;


-- PACHET GEO_APIA_PKG -----------------------------------------------------------------------------


CREATE OR REPLACE PACKAGE geo_apia_pkg AS
    FUNCTION test_orientare(
        x1 NUMBER, y1 NUMBER,
        x2 NUMBER, y2 NUMBER,
        x3 NUMBER, y3 NUMBER
    ) RETURN NUMBER;

    FUNCTION intersectie_linii(
        x_start_1 NUMBER, y_start_1 NUMBER,
        x_end_1 NUMBER, y_end_1 NUMBER,
        x_start_2 NUMBER, y_start_2 NUMBER,
        x_end_2 NUMBER, y_end_2 NUMBER
    ) RETURN NUMBER;

    FUNCTION punct_in_poligon(
        x_poligon NUM_LIST, y_poligon NUM_LIST,
        x_punct NUMBER, y_punct NUMBER,
        x_referinta NUMBER DEFAULT 0, y_referinta NUMBER DEFAULT 0
    ) RETURN NUMBER;

    FUNCTION intersectie_poligoane(
        x_poligon_1 NUM_LIST, y_poligon_1 NUM_LIST,
        x_poligon_2 NUM_LIST, y_poligon_2 NUM_LIST
    ) RETURN NUMBER;

END geo_apia_pkg;

CREATE OR REPLACE PACKAGE BODY geo_apia_pkg AS
    FUNCTION test_orientare(
        x1 NUMBER, y1 NUMBER,
        x2 NUMBER, y2 NUMBER,
        x3 NUMBER, y3 NUMBER
    ) RETURN NUMBER
    AS
        v_rezultat NUMBER;
    BEGIN
        v_rezultat := x3 * y1 + x1 * y2 - x3 * y2 - x1 * y3 + x2 * y3 - x2 * y1;
        RETURN v_rezultat;
    END;

    FUNCTION intersectie_linii(
        x_start_1 NUMBER, y_start_1 NUMBER,
        x_end_1 NUMBER, y_end_1 NUMBER,
        x_start_2 NUMBER, y_start_2 NUMBER,
        x_end_2 NUMBER, y_end_2 NUMBER
    ) RETURN NUMBER
    AS
        pos1       NUMBER;
        pos2       NUMBER;
        pos3       NUMBER;
        pos4       NUMBER;
        v_rezultat NUMBER := 1;
    BEGIN
        -- Pozitiile fiecarui punct dintr-o dreapta fata de cealalta dreapta
        pos1 := geo_apia_pkg.test_orientare(x_start_1, y_start_1, x_end_1, y_end_1, x_start_2, y_start_2);
        pos2 := geo_apia_pkg.test_orientare(x_start_1, y_start_1, x_end_1, y_end_1, x_end_2, y_end_2);
        pos3 := geo_apia_pkg.test_orientare(x_start_2, y_start_2, x_end_2, y_end_2, x_start_1, y_start_1);
        pos4 := geo_apia_pkg.test_orientare(x_start_2, y_start_2, x_end_2, y_end_2, x_end_1, y_end_1);
        -- Testam daca sunt 2 puncte la stanga sau 2 la dreapta
        IF ((pos1 > 0 AND pos2 > 0) OR (pos1 < 0 AND pos2 < 0)) OR
           ((pos3 > 0 AND pos4 > 0) OR (pos3 < 0 AND pos4 < 0)) THEN
            v_rezultat := 0;
        END IF;

        RETURN v_rezultat;
    END;

    FUNCTION punct_in_poligon(
        x_poligon NUM_LIST, y_poligon NUM_LIST,
        x_punct NUMBER, y_punct NUMBER,
        x_referinta NUMBER DEFAULT 0, y_referinta NUMBER DEFAULT 0
    ) RETURN NUMBER AS
        intersectii      NUMBER := 0;
        se_intersecteaza NUMBER;
    BEGIN
        -- Numaram intersectiile dintre laturile poligonului si linia dusa din punct catre referinta
        FOR i IN x_poligon.first..(x_poligon.last - 1)
            LOOP
                se_intersecteaza := geo_apia_pkg.intersectie_linii(
                        x_punct, y_punct, x_referinta, y_referinta,
                        x_poligon(i), y_poligon(i), x_poligon(i + 1), y_poligon(i + 1)
                    );
                IF (se_intersecteaza = 1) THEN
                    intersectii := intersectii + 1;
                END IF;
            END LOOP;
        -- Daca e nr par, nu e inauntru, si daca e impar, e inauntru
        IF MOD(intersectii, 2) = 0 THEN
            RETURN 0;
        ELSE
            RETURN 1;
        END IF;
    END;

    FUNCTION intersectie_poligoane(
        x_poligon_1 NUM_LIST, y_poligon_1 NUM_LIST,
        x_poligon_2 NUM_LIST, y_poligon_2 NUM_LIST
    ) RETURN NUMBER AS
    BEGIN
        FOR i IN x_poligon_1.first..x_poligon_1.last
            LOOP
                -- Daca unul dintre punctele primului poligon se afla pe al doilea poligon
                IF geo_apia_pkg.punct_in_poligon(x_poligon_2, y_poligon_2, x_poligon_1(i), y_poligon_1(i)) = 1 THEN
                    RETURN 1;
                END IF;
            END LOOP;
        FOR i IN x_poligon_2.first..x_poligon_2.last
            LOOP
                -- Daca unul dintre punctele celui de-al doilea poligon se afla pe primul poligon
                IF geo_apia_pkg.punct_in_poligon(x_poligon_1, y_poligon_1, x_poligon_2(i), y_poligon_2(i)) = 1 THEN
                    RETURN 1;
                END IF;
            END LOOP;
        RETURN 0;
    END;
END geo_apia_pkg;


-- PACHET APIA_PKG (AICI SUNT REZOLVATE CERINTELE 6 - 9) ---------------------------------------


CREATE OR REPLACE PACKAGE apia_pkg AS
    FUNCTION calculare_suprafata(
        v_id_coordonate coordonate.ID%TYPE
    ) RETURN NUMBER;

    PROCEDURE creare_parcela(
        v_id_proprietar utilizator.ID%TYPE,
        v_id_coordonate coordonate.ID%TYPE,
        v_id_cultura cultura.ID%TYPE,
        v_id_parcela parcela.NR_PARCELA%TYPE
    );

    FUNCTION localitate_parcela(
        v_id_parcela parcela.ID%TYPE
    ) RETURN VARCHAR2;

    PROCEDURE suprafete_useri_5ani;

    FUNCTION cel_mai_frecvent_caen(
        v_nume_localitate localitate.DENUMIRE%TYPE
    ) RETURN caen.COD%TYPE;

    PROCEDURE suprafata_persoana_din_localitate(
        v_nume_localitate localitate.DENUMIRE%TYPE
    );
END apia_pkg;

CREATE OR REPLACE PACKAGE BODY apia_pkg AS
    FUNCTION calculare_suprafata(
        v_id_coordonate coordonate.ID%TYPE
    ) RETURN NUMBER AS
        v_suprafata NUMBER := 0;
        v_lat       NUM_LIST;
        v_long      NUM_LIST;
        conv_factor NUMBER := 93;
    BEGIN
        SELECT latitudine, longitudine INTO v_lat, v_long FROM coordonate WHERE id = v_id_coordonate;
        -- Aplicam formula Shoelace
        FOR i IN v_lat.first..(v_lat.last - 1)
            LOOP
                v_suprafata := v_suprafata + (v_long(i) + v_long(i + 1)) * (v_lat(i + 1) - v_lat(i));
            END LOOP;

        -- Aici avem suprafata in grade la patrat
        v_suprafata := ABS(v_suprafata) / 2;

        -- Facem conversie in km2
        v_suprafata := v_suprafata * conv_factor * conv_factor;

        -- Inmultim cu 100 sa obtine hectare
        v_suprafata := v_suprafata * 100;
        RETURN ROUND(v_suprafata, 2);
    END;

    PROCEDURE creare_parcela(
        v_id_proprietar utilizator.ID%TYPE,
        v_id_coordonate coordonate.ID%TYPE,
        v_id_cultura cultura.ID%TYPE,
        v_id_parcela parcela.NR_PARCELA%TYPE
    ) AS
        v_suprafata NUMBER;
    BEGIN
        v_suprafata := calculare_suprafata(v_id_coordonate);
        INSERT INTO parcela (id_proprietar, id_coordonate, id_cultura, nr_parcela, suprafata, ultima_actualizare)
        VALUES (v_id_proprietar, v_id_coordonate, v_id_cultura, v_id_parcela, v_suprafata, SYSDATE);
    END;

    FUNCTION localitate_parcela(
        v_id_parcela parcela.ID%TYPE
    ) RETURN VARCHAR2 AS
        TYPE LOC_LIST IS TABLE OF VARCHAR2(100) INDEX BY PLS_INTEGER;
        v_nume_localitati LOC_LIST;
        v_lat_parcela     NUM_LIST;
        v_long_parcela    NUM_LIST;
        v_lat_localitate  NUM_LIST;
        v_long_localitate NUM_LIST;
        v_idx             NUMBER := 0;
    BEGIN
        -- Salvam coordonatele parcelei
        SELECT c.latitudine, c.longitudine
        INTO v_lat_parcela, v_long_parcela
        FROM parcela p
                 JOIN coordonate c ON c.id = p.id_coordonate
        WHERE p.id = v_id_parcela;
        -- Pentru fiecra localitate
        FOR l IN (SELECT * FROM localitate)
            LOOP
                -- Salvam coordonatele localitatii
                SELECT c.latitudine, c.longitudine
                INTO v_lat_localitate, v_long_localitate
                FROM coordonate c
                WHERE c.id = l.id;
                -- Daca se intersecteaza cu parcela atunci o salvam
                IF geo_apia_pkg.intersectie_poligoane(
                           v_lat_parcela, v_long_parcela,
                           v_lat_localitate, v_long_localitate
                       ) = 1 THEN
                    v_idx := v_idx + 1;
                    v_nume_localitati(v_idx) := l.denumire;
                END IF;
            END LOOP;

        -- Daca nu am gasit nicio localitate
        IF v_nume_localitati.count = 0 THEN
            RETURN 'FARA LOCALITATE';
        END IF;

        -- Aici lipesc toate localitatile in prima localitate
        FOR i IN 2..v_nume_localitati.last
            LOOP
                v_nume_localitati(1) := v_nume_localitati(1) || ', ' || v_nume_localitati(i);
            END LOOP;

        RETURN v_nume_localitati(1);
    END;

    PROCEDURE suprafete_useri_5ani IS
        -- Toti userii mai vechi de 5 ani
        CURSOR c_utilizatori IS
            SELECT nume_utilizator
            FROM utilizator
            WHERE ADD_MONTHS(data_inscriere, 12 * 5) < SYSDATE;

        -- id-ul culturii si suprafata totala pt fiecare user data parametru
        CURSOR c_parcele_utilizator (username utilizator.NUME_UTILIZATOR%TYPE) IS
            SELECT id_cultura, SUM(suprafata) AS suprafata
            FROM parcela
            WHERE id_proprietar = (SELECT id FROM utilizator WHERE nume_utilizator = username)
            GROUP BY id_cultura;
        v_nume_cultura cultura.DENUMIRE%TYPE;
    BEGIN
        dbms_output.put_line('_____________________');
        FOR v_user IN c_utilizatori
            LOOP
                dbms_output.put_line(v_user.nume_utilizator || ': ');
                FOR v_parcela IN c_parcele_utilizator(v_user.nume_utilizator)
                    LOOP
                        SELECT denumire INTO v_nume_cultura FROM cultura WHERE id = v_parcela.id_cultura;
                        dbms_output.put_line(TO_CHAR(v_parcela.suprafata) || ' hectare de ' || v_nume_cultura);
                    END LOOP;
                dbms_output.put_line('_____________________');
            END LOOP;
    END;

    FUNCTION cel_mai_frecvent_caen(
        v_nume_localitate localitate.DENUMIRE%TYPE
    ) RETURN caen.COD%TYPE AS
        -- codul si frecventa maxima
        v_cod           caen.COD%TYPE;
        v_max           NUMBER;

        -- codul si a doua frecventa maxima
        v_second_max    NUMBER := 0;
        v_second_code   caen.COD%TYPE;

        -- numarul localitatilor cu denumirea respectiva
        v_nr_localitati NUMBER := 0;

        -- codurile caen si frecventa lor in firmele din localitate data ca parametru
        CURSOR c_coduri IS
            SELECT fc.cod_caen, COUNT(fc.cod_caen) AS frecventa
            FROM firma f
                     JOIN firma_caen fc ON f.id = fc.id_firma
            WHERE f.id_sediu = (SELECT l.id FROM localitate l WHERE LOWER(l.denumire) = LOWER(v_nume_localitate))
            GROUP BY fc.cod_caen
            ORDER BY COUNT(fc.cod_caen) DESC;

        localitate_inexistenta EXCEPTION;
        prea_multe_localitati EXCEPTION;
        localitatea_fara_firme EXCEPTION;
        prea_multe_coduri_caen EXCEPTION;
    BEGIN
        SELECT COUNT(*)
        INTO v_nr_localitati
        FROM localitate
        WHERE LOWER(denumire) = LOWER(v_nume_localitate);

        IF v_nr_localitati = 0 THEN
            RAISE localitate_inexistenta;
        ELSIF v_nr_localitati > 1 THEN
            RAISE prea_multe_localitati;
        END IF;

        OPEN c_coduri;
        FETCH c_coduri INTO v_cod, v_max;

        -- daca nu exista niciun cod inseamna ca nu exista firme
        IF v_cod IS NULL THEN
            RAISE localitatea_fara_firme;
        END IF;

        -- daca exista mai mult de un cod
        IF NOT c_coduri%NOTFOUND THEN
            FETCH c_coduri INTO v_second_code, v_second_max;
        END IF;
        CLOSE c_coduri;

        -- daca primele 2 coduri sunt la fel de frecvente
        IF v_second_max = v_max THEN
            RAISE prea_multe_coduri_caen;
        END IF;

        RETURN v_cod;
    EXCEPTION
        WHEN localitatea_fara_firme THEN
            RAISE_APPLICATION_ERROR(-20000, 'Nu exista firme in localitatea specificata.');
        WHEN localitate_inexistenta THEN
            RAISE_APPLICATION_ERROR(-20001, 'Localitatea specificata nu exista.');
        WHEN prea_multe_localitati THEN
            RAISE_APPLICATION_ERROR(-20002, 'Prea multe localitati cu numele specificat.');
        WHEN prea_multe_coduri_caen THEN
            RAISE_APPLICATION_ERROR(-20003, 'Exista mai mult de un cod caen cu frecventa ' || v_max || '.');
    END;

    PROCEDURE suprafata_persoana_din_localitate(
        v_nume_localitate localitate.DENUMIRE%TYPE
    ) IS
        v_suprafata NUMBER;
    BEGIN
        -- calculam suprafata detinuta de firma persoanei fizice din localitatea specificata
        SELECT SUM(p.suprafata)
        INTO v_suprafata
        FROM utilizator u
                 JOIN parcela p ON u.id = p.id_proprietar
                 JOIN firma f ON f.id = u.id_firma
                 JOIN persoana_fizica pf ON pf.id = f.id_administrator
                 JOIN localitate l ON pf.id_domiciliu = l.id
        WHERE LOWER(l.denumire) = LOWER(v_nume_localitate)
        GROUP BY u.nume_utilizator;

        IF v_suprafata >= 50 then
            dbms_output.PUT_LINE('Suprafata este mai mare de 50 hectare');
        ELSE
            dbms_output.PUT_LINE('Suprafata este mai mica de 50 hectare');
        END IF;

    EXCEPTION
        WHEN too_many_rows THEN
            RAISE_APPLICATION_ERROR(-20004, 'Prea multe persoane fizice cu domiciliu in ' || v_nume_localitate);
        WHEN no_data_found THEN
            RAISE_APPLICATION_ERROR(-20005, 'Nu exista nicio persoana fizica cu domiciliu in ' || v_nume_localitate);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(SQLCODE, SQLERRM);
    END;
END apia_pkg;



-- RULAREA CODULUI DIN CERINTELE 6 - 12 -------------------------------------------------------------------------------


-- 6. Scrieti o functie care returneaza numele localitatii in care se afla o parcela.
-- Daca nu se afla in nicio localitate atunci returneaza 'FARA LOCALITATE'.
-- Daca sunt mai multe atunci returneaza toate localitatile separate prin virgula.
-- Folositi 2 tipuri diferite de colectii.

DECLARE
    x VARCHAR2(100);
BEGIN
    FOR p IN (SELECT * FROM parcela)
        LOOP
            x := apia_pkg.localitate_parcela(p.id);
            dbms_output.put_line(p.id || ': ' || x);
        END LOOP;
END;

-- 7. Scrieti o procedura care afiseaza suprafata totala pentru fiecare cultura a utilizatorilor
-- cu vechime mai mare de 5 ani. Folositi 2 cursoare diferite, dintre care unul sa fie parametrizat.
BEGIN
    apia_pkg.suprafete_useri_5ani();
END;

-- 8. Scrieti o functie care returneaza cel mai folosit cod CAEN al firmelor
-- dintr-o localitate al carei nume este dat ca parametru.
-- Tratati cazul in care localitatea nu exista, in localitate nu exista firme,
-- sau exista 2 coduri folosite la fel de des
SELECT apia_pkg.cel_mai_frecvent_caen('Gohor')
FROM dual;

SELECT apia_pkg.cel_mai_frecvent_caen('Targu Neamt')
FROM dual;

SELECT apia_pkg.cel_mai_frecvent_caen('Nartesti')
FROM dual;

SELECT apia_pkg.cel_mai_frecvent_caen('Brahasesti')
FROM dual;

-- 9. Procedura care verifica daca suprafata totala a firmei unde este
-- administrator persoana fizica cu domiciliu in localitatea data ca
-- parametru este mai mare de 50 hectare

BEGIN
    apia_pkg.suprafata_persoana_din_localitate('gohor');
END;
BEGIN
    apia_pkg.suprafata_persoana_din_localitate('brahasesti');
END;
BEGIN
    apia_pkg.suprafata_persoana_din_localitate('nartesti');
END;

-- 10. Trigger de tip LMD la nivel de comandă: Anuleaza inserarea utilizatorilor in intervalul 21:00 - 07:00
CREATE OR REPLACE TRIGGER anuleaza_inserare_utilizator
    BEFORE INSERT
    ON utilizator
DECLARE
    v_current_time VARCHAR2(8);
BEGIN
    v_current_time := TO_CHAR(SYSDATE, 'HH24:MI:SS');

    IF v_current_time >= '21:00:00' OR v_current_time < '07:00:00' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Nu se pot adauga utilizatori intre 21:00 si 07:00.');
    END IF;
END;
INSERT INTO utilizator (id, id_firma, nume_utilizator, parola)
VALUES (6, 4, 'test', 'test');

-- 11. Trigger de tip LMD la nivel de comandă: Modifica suprafta si ultima_actualizare a parcelei
CREATE OR REPLACE TRIGGER actualizare_parcela
    BEFORE UPDATE
    ON parcela
    FOR EACH ROW
BEGIN
    :new.ultima_actualizare := SYSDATE;
    :new.suprafata := apia_pkg.calculare_suprafata(:new.id_coordonate);
END;

CREATE OR REPLACE TRIGGER actualizare_coordonate
    AFTER UPDATE
    ON coordonate
    FOR EACH ROW
DECLARE
    v_id_parcela parcela.ID%TYPE;
BEGIN
    SELECT id INTO v_id_parcela FROM parcela WHERE id_coordonate = :new.id;
    UPDATE parcela
    SET suprafata          = apia_pkg.calculare_suprafata(:new.id),
        ultima_actualizare = SYSDATE
    WHERE id = v_id_parcela;
END;

SELECT *
FROM parcela WHERE id = 25;

UPDATE parcela
SET nr_parcela = 4
WHERE id = 25;

SELECT *
FROM parcela WHERE id = 25;


-- 12. Trigger de tip LDD: Eroare cand alt user in afara de ADMIN incearca sa modifice tabele
CREATE OR REPLACE TRIGGER modificare_tabele
    AFTER DROP OR ALTER
    ON SCHEMA
    WHEN (USER != 'ADMIN')
BEGIN
    RAISE_APPLICATION_ERROR(-20010, 'Doar userul ADMIN poate sterge sau modifica tabele!');
END;

DROP TABLE firma_caen;
